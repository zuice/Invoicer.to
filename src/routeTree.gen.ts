/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as ProtectedSettingsRouteImport } from './routes/_protected/settings'
import { Route as ProtectedClientsRouteImport } from './routes/_protected/clients'
import { Route as ProtectedInvoicesIndexRouteImport } from './routes/_protected/invoices/index'
import { Route as ProtectedInvoicesNewRouteImport } from './routes/_protected/invoices/new'
import { Route as ProtectedInvoicesIdRouteImport } from './routes/_protected/invoices/$id'
import { ServerRoute as ProtectedApiInvoicesIdPdfServerRouteImport } from './routes/_protected/api/invoices/$id/pdf'

const rootServerRouteImport = createServerRootRoute()

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedSettingsRoute = ProtectedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedClientsRoute = ProtectedClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedInvoicesIndexRoute = ProtectedInvoicesIndexRouteImport.update({
  id: '/invoices/',
  path: '/invoices/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedInvoicesNewRoute = ProtectedInvoicesNewRouteImport.update({
  id: '/invoices/new',
  path: '/invoices/new',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedInvoicesIdRoute = ProtectedInvoicesIdRouteImport.update({
  id: '/invoices/$id',
  path: '/invoices/$id',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedApiInvoicesIdPdfServerRoute =
  ProtectedApiInvoicesIdPdfServerRouteImport.update({
    id: '/_protected/api/invoices/$id/pdf',
    path: '/api/invoices/$id/pdf',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/clients': typeof ProtectedClientsRoute
  '/settings': typeof ProtectedSettingsRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/': typeof ProtectedIndexRoute
  '/invoices/$id': typeof ProtectedInvoicesIdRoute
  '/invoices/new': typeof ProtectedInvoicesNewRoute
  '/invoices': typeof ProtectedInvoicesIndexRoute
}
export interface FileRoutesByTo {
  '/clients': typeof ProtectedClientsRoute
  '/settings': typeof ProtectedSettingsRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/': typeof ProtectedIndexRoute
  '/invoices/$id': typeof ProtectedInvoicesIdRoute
  '/invoices/new': typeof ProtectedInvoicesNewRoute
  '/invoices': typeof ProtectedInvoicesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/clients': typeof ProtectedClientsRoute
  '/_protected/settings': typeof ProtectedSettingsRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/invoices/$id': typeof ProtectedInvoicesIdRoute
  '/_protected/invoices/new': typeof ProtectedInvoicesNewRoute
  '/_protected/invoices/': typeof ProtectedInvoicesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/clients'
    | '/settings'
    | '/auth/sign-in'
    | '/'
    | '/invoices/$id'
    | '/invoices/new'
    | '/invoices'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/clients'
    | '/settings'
    | '/auth/sign-in'
    | '/'
    | '/invoices/$id'
    | '/invoices/new'
    | '/invoices'
  id:
    | '__root__'
    | '/_protected'
    | '/_protected/clients'
    | '/_protected/settings'
    | '/auth/sign-in'
    | '/_protected/'
    | '/_protected/invoices/$id'
    | '/_protected/invoices/new'
    | '/_protected/invoices/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AuthSignInRoute: typeof AuthSignInRoute
}
export interface FileServerRoutesByFullPath {
  '/api/invoices/$id/pdf': typeof ProtectedApiInvoicesIdPdfServerRoute
}
export interface FileServerRoutesByTo {
  '/api/invoices/$id/pdf': typeof ProtectedApiInvoicesIdPdfServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/_protected/api/invoices/$id/pdf': typeof ProtectedApiInvoicesIdPdfServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/invoices/$id/pdf'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/invoices/$id/pdf'
  id: '__root__' | '/_protected/api/invoices/$id/pdf'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ProtectedApiInvoicesIdPdfServerRoute: typeof ProtectedApiInvoicesIdPdfServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/clients': {
      id: '/_protected/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ProtectedClientsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/invoices/': {
      id: '/_protected/invoices/'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof ProtectedInvoicesIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/invoices/new': {
      id: '/_protected/invoices/new'
      path: '/invoices/new'
      fullPath: '/invoices/new'
      preLoaderRoute: typeof ProtectedInvoicesNewRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/invoices/$id': {
      id: '/_protected/invoices/$id'
      path: '/invoices/$id'
      fullPath: '/invoices/$id'
      preLoaderRoute: typeof ProtectedInvoicesIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/_protected/api/invoices/$id/pdf': {
      id: '/_protected/api/invoices/$id/pdf'
      path: '/api/invoices/$id/pdf'
      fullPath: '/api/invoices/$id/pdf'
      preLoaderRoute: typeof ProtectedApiInvoicesIdPdfServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedClientsRoute: typeof ProtectedClientsRoute
  ProtectedSettingsRoute: typeof ProtectedSettingsRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedInvoicesIdRoute: typeof ProtectedInvoicesIdRoute
  ProtectedInvoicesNewRoute: typeof ProtectedInvoicesNewRoute
  ProtectedInvoicesIndexRoute: typeof ProtectedInvoicesIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedClientsRoute: ProtectedClientsRoute,
  ProtectedSettingsRoute: ProtectedSettingsRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedInvoicesIdRoute: ProtectedInvoicesIdRoute,
  ProtectedInvoicesNewRoute: ProtectedInvoicesNewRoute,
  ProtectedInvoicesIndexRoute: ProtectedInvoicesIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AuthSignInRoute: AuthSignInRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ProtectedApiInvoicesIdPdfServerRoute: ProtectedApiInvoicesIdPdfServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
